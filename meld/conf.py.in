import os
import re
import sys
from pathlib import Path
from typing import Tuple

APPLICATION_NAME = 'Meld'
APPLICATION_ID = 'org.gnome.Meld'
SETTINGS_SCHEMA_ID = 'org.gnome.meld'
RESOURCE_BASE = '/org/gnome/meld'

CONFIGURED = '@configured@'
PROFILE = ''

if CONFIGURED == 'True':
    APPLICATION_ID = '@application_id@'
    DATADIR = Path("@pkgdatadir@")
    LOCALEDIR = Path("@localedir@")
    PROFILE = '@profile@'

    __package__ = '@project@'
    __version__ = '@version@'

# Flag enabling some workarounds if data dir isn't installed in standard prefix
DATADIR_IS_UNINSTALLED = False


# Installed from main script
def no_translation(gettext_string: str) -> str:
    return gettext_string


_ = no_translation
ngettext = no_translation


def project_version_from_meson(meson_path: Path) -> Tuple[str, str]:
    project_line = meson_path.read_text().splitlines()[0]
    meson_project = re.match(
        r"project\('(?P<project>\w+)', version : '(?P<version>[0-9.]+)'.*",
        project_line,
    )
    if not meson_project:
        raise RuntimeError("Couldn't parse version from meson.build")

    return meson_project.group("project"), meson_project.group("version")


def frozen():
    global DATADIR, LOCALEDIR, DATADIR_IS_UNINSTALLED

    melddir = Path(sys.executable).parent

    DATADIR = melddir / "share" / "meld"
    LOCALEDIR = melddir / "share" / "mo"
    DATADIR_IS_UNINSTALLED = True


def uninstalled():
    global DATADIR, LOCALEDIR, DATADIR_IS_UNINSTALLED, __package__, __version__

    melddir = Path(__file__).resolve().parent.parent
    meson_path = melddir / "meson.build"

    __package__, __version__ = project_version_from_meson(meson_path)

    DATADIR = melddir / "data"
    LOCALEDIR = melddir / "build" / "mo"
    DATADIR_IS_UNINSTALLED = True

    resource_path = melddir / "meld" / "resources"
    os.environ['G_RESOURCE_OVERLAYS'] = f'{RESOURCE_BASE}={resource_path}'
